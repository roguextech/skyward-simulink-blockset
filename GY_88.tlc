%% File : GY_88.tlc
%% Created: Fri Mar 20 16:38:43 2015
%%
%% Description: 
%%   Simulink Coder wrapper functions interface generated for 
%%   S-function "GY_88.c".
%%
%%         File generated by S-function Builder Block
%%
%%   For more information on using the Target Language with the 
%%   Simulink Coder, see the Target Language Compiler manual
%%   (under Simulink Coder) in the "Inlining S-Functions"
%%   chapter under the section and subsection:
%%     "Writing Block Target Files to Inline S-Functions",
%%        "Function-Based or Wrappered Code".
%%
%implements  GY_88 "C"
%% Function: BlockTypeSetup ===================================================
%%
%% Purpose:
%%      Set up external references for wrapper functions in the 
%%      generated code.
%%
%function BlockTypeSetup(block, system) Output
  %openfile externs
    
  extern void GY_88_Outputs_wrapper(real_T *temperature,
			real_T *pressure,
			real_T *altitude,
			real_T *magnitude,
			real_T *acceleration,
			real_T *angular_velocity,
			const real_T *xD);
  extern void GY_88_Update_wrapper(const real_T *temperature,
			const real_T *pressure,
			const real_T *altitude,
			const real_T *magnitude,
			const real_T *acceleration,
			const real_T *angular_velocity,
			real_T *xD);
  %closefile externs
  %<LibCacheExtern(externs)>
  %%
%endfunction

%% InitializeConditions =========================================================
 %%
 %function InitializeConditions(block, system) Output
  /* %<Type> Block: %<Name> */
  {

   real_T initVector[1] = {0};
   %assign rollVars = ["<dwork>/DSTATE"]
   %assign rollRegions = [0:%<LibBlockDWorkWidth(DSTATE)-1>]
   %roll sigIdx = rollRegions, lcv = 1, block, "Roller", rollVars
     %if %<LibBlockDWorkWidth(DSTATE)> == 1
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[0];
      %else
       %<LibBlockDWork(DSTATE, "", lcv, sigIdx)> = initVector[%<lcv>];
      %endif
   %endroll
  }
  
 %endfunction
%% Function: Outputs ==========================================================
%%
%% Purpose:
%%      Code generation rules for mdlOutputs function.
%%
%function Outputs(block, system) Output
  %%
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  %assign py_width = LibBlockOutputSignalWidth(0)
  GY_88_Outputs_wrapper( %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>,  %<pxd>);

  %%
%endfunction

%% Function: Update ==========================================================
%% Abstract:
%%    Update
%%     
%%
%function Update(block, system) Output
    /* S-Function "GY_88_wrapper" Block: %<Name> */
   
  %assign py0 = LibBlockOutputSignalAddr(0, "", "", 0)
  %assign py1 = LibBlockOutputSignalAddr(1, "", "", 0)
  %assign py2 = LibBlockOutputSignalAddr(2, "", "", 0)
  %assign py3 = LibBlockOutputSignalAddr(3, "", "", 0)
  %assign py4 = LibBlockOutputSignalAddr(4, "", "", 0)
  %assign py5 = LibBlockOutputSignalAddr(5, "", "", 0)
  %assign pxd = LibBlockDWorkAddr(DSTATE, "", "", 0)
  
  
 
  GY_88_Update_wrapper( %<py0>, %<py1>, %<py2>, %<py3>, %<py4>, %<py5>, %<pxd>);
  

  %%
%endfunction 
%% [EOF] GY_88.tlc





